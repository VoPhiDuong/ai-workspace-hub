export interface SearchResult {
  title: string;
  description: string;
  url: string;
  hostname: string;
  published?: string;
}

export async function searchWithBrave(
  query: string, 
  count: number = 10,
  retryCount: number = 0
): Promise<SearchResult[]> {
  try {
    console.log(`üîç T√¨m ki·∫øm: "${query}" (l·∫ßn th·ª≠ ${retryCount + 1})`);

    const response = await fetch('/api/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ query, count }),
    });

    const data = await response.json();

    if (!response.ok) {
      console.error(`‚ùå L·ªói API: ${response.status}`, data);
      
      // Retry cho server errors (500, 502, 503, 504)
      if (response.status >= 500 && retryCount < 2) {
        console.log(`üîÑ Th·ª≠ l·∫°i sau ${(retryCount + 1) * 2} gi√¢y...`);
        await new Promise(resolve => setTimeout(resolve, (retryCount + 1) * 2000));
        return searchWithBrave(query, count, retryCount + 1);
      }

      // Throw v·ªõi error message t·ª´ server
      throw new Error(data.error || `L·ªói API: ${response.status}`);
    }

    console.log(`‚úÖ T√¨m th·∫•y ${data.results?.length || 0} k·∫øt qu·∫£`);
    return data.results || [];

  } catch (error) {
    console.error('üö® L·ªói t√¨m ki·∫øm:', error);
    
    // Network errors
    if (error instanceof TypeError && error.message.includes('fetch')) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• t√¨m ki·∫øm. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
    }

    // Timeout errors
    if (error instanceof Error && error.name === 'AbortError') {
      throw new Error('Y√™u c·∫ßu t√¨m ki·∫øm b·ªã timeout. Vui l√≤ng th·ª≠ v·ªõi t·ª´ kh√≥a ng·∫Øn g·ªçn h∆°n.');
    }

    // Re-throw known errors
    if (error instanceof Error) {
      throw error;
    }

    // Unknown errors
    throw new Error('ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi t√¨m ki·∫øm. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}

export class BraveSearchService {
  async search(query: string, count: number = 10): Promise<any> {
    try {
      const results = await searchWithBrave(query, count);
      return {
        web: {
          results: results
        }
      };
    } catch (error) {
      console.error('BraveSearchService error:', error);
      
      // Return fallback structure v·ªõi error info
      return {
        web: {
          results: []
        },
        error: error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
      };
    }
  }

  async searchNews(query: string): Promise<any> {
    return this.search(query + ' news', 10);
  }
}

export const braveSearchService = new BraveSearchService();
