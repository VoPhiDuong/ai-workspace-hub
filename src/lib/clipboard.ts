/**
 * An to√†n copy text v√†o clipboard v·ªõi fallback methods
 */
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    // Method 1: Modern Clipboard API (ch·ªâ ho·∫°t ƒë·ªông tr√™n HTTPS ho·∫∑c localhost)
    if (navigator?.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(text);
      console.log('‚úÖ ƒê√£ copy b·∫±ng Clipboard API');
      return true;
    }

    // Method 2: Fallback s·ª≠ d·ª•ng document.execCommand (deprecated nh∆∞ng v·∫´n ho·∫°t ƒë·ªông)
    return fallbackCopyTextToClipboard(text);

  } catch (error) {
    console.error('‚ùå L·ªói copy v·ªõi Clipboard API:', error);
    
    // Fallback n·∫øu Clipboard API th·∫•t b·∫°i
    return fallbackCopyTextToClipboard(text);
  }
}

/**
 * Fallback method s·ª≠ d·ª•ng selection v√† execCommand
 */
function fallbackCopyTextToClipboard(text: string): boolean {
  try {
    // T·∫°o textarea ·∫©n
    const textArea = document.createElement('textarea');
    textArea.value = text;
    
    // Style ƒë·ªÉ ·∫©n element
    textArea.style.position = 'fixed';
    textArea.style.top = '-9999px';
    textArea.style.left = '-9999px';
    textArea.style.width = '2em';
    textArea.style.height = '2em';
    textArea.style.padding = '0';
    textArea.style.border = 'none';
    textArea.style.outline = 'none';
    textArea.style.boxShadow = 'none';
    textArea.style.background = 'transparent';
    
    // Th√™m v√†o DOM
    document.body.appendChild(textArea);
    
    // Focus v√† select text
    textArea.focus();
    textArea.select();
    textArea.setSelectionRange(0, 99999); // Cho mobile
    
    // Copy
    const successful = document.execCommand('copy');
    
    // Cleanup
    document.body.removeChild(textArea);
    
    if (successful) {
      console.log('‚úÖ ƒê√£ copy b·∫±ng fallback method');
      return true;
    } else {
      console.error('‚ùå Fallback copy th·∫•t b·∫°i');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói fallback copy:', error);
    return false;
  }
}

/**
 * Copy text v·ªõi toast notification v√† visual feedback
 */
export async function copyWithToast(
  text: string, 
  onSuccess?: () => void, 
  onError?: (error: string) => void
): Promise<void> {
  const success = await copyToClipboard(text);
  
  if (success) {
    onSuccess?.();
    console.log('üìã ƒê√£ copy v√†o clipboard!');
    
    // Visual feedback v·ªõi temporary notification
    showTemporaryToast('‚úÖ ƒê√£ copy th√†nh c√¥ng!', 'success');
  } else {
    const errorMsg = 'Kh√¥ng th·ªÉ copy. Vui l√≤ng copy th·ªß c√¥ng.';
    onError?.(errorMsg);
    console.error('üìã ' + errorMsg);
    
    // Show error feedback
    showTemporaryToast('‚ùå Copy th·∫•t b·∫°i. Th·ª≠ l·∫°i!', 'error');
  }
}

/**
 * Hi·ªÉn th·ªã temporary toast notification
 */
function showTemporaryToast(message: string, type: 'success' | 'error' = 'success') {
  // T·∫°o toast element
  const toast = document.createElement('div');
  toast.className = `fixed top-4 right-4 z-[9999] px-4 py-2 rounded-md text-white font-medium transition-all duration-300 transform translate-x-0 ${
    type === 'success' 
      ? 'bg-green-600 border border-green-500' 
      : 'bg-red-600 border border-red-500'
  }`;
  toast.textContent = message;
  
  // Style cho animation
  toast.style.opacity = '0';
  toast.style.transform = 'translateX(100%)';
  
  document.body.appendChild(toast);
  
  // Animate in
  requestAnimationFrame(() => {
    toast.style.opacity = '1';
    toast.style.transform = 'translateX(0)';
  });
  
  // Animate out v√† remove
  setTimeout(() => {
    toast.style.opacity = '0';
    toast.style.transform = 'translateX(100%)';
    
    setTimeout(() => {
      if (document.body.contains(toast)) {
        document.body.removeChild(toast);
      }
    }, 300);
  }, 2000);
}

/**
 * Check xem clipboard c√≥ kh·∫£ d·ª•ng kh√¥ng
 */
export function isClipboardAvailable(): boolean {
  return !!(navigator?.clipboard && window.isSecureContext) || 
         !!(document.queryCommandSupported && document.queryCommandSupported('copy'));
}

/**
 * Copy v·ªõi prompt fallback cho mobile
 */
export async function copyWithPrompt(text: string): Promise<boolean> {
  const success = await copyToClipboard(text);
  
  if (!success) {
    // Fallback: show prompt ƒë·ªÉ user copy th·ªß c√¥ng
    if (window.prompt) {
      window.prompt('Copy text b√™n d∆∞·ªõi (Ctrl+C):', text);
      return true;
    }
  }
  
  return success;
} 